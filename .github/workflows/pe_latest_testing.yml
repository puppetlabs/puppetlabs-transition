name: "PE Latest Acceptance Testing"

on:
  workflow_dispatch:
  workflow_call:

jobs:
  setup_matrix:
    name: "Setup Test Matrix"
    runs-on: ubuntu-22.04
    outputs:
      matrix: ${{ steps.get-matrix.outputs.matrix }}

    steps:
    - name: Checkout Source
      uses: actions/checkout@v3
      if: ${{ github.repository_owner == 'puppetlabs' }}

    - name: Activate Ruby 2.7
      uses: ruby/setup-ruby@v1
      if: ${{ github.repository_owner == 'puppetlabs' }}
      with:
        ruby-version: "2.7"
        bundler-cache: true

    - name: Print bundle environment
      if: ${{ github.repository_owner == 'puppetlabs' }}
      run: |
        echo ::group::bundler environment
        bundle env
        echo ::endgroup::

    # store the result of the curl call in $forge_response
    - name: Curl Forge for PE versions
      id: curl_forge
      run: |
        echo "forge_response=$(curl https://forge.puppet.com/private/versions/pe)" >> $GITHUB_OUTPUT

    - name: Set latest release
      id: latest_release
      run: |
        out=$(jq -c '[.[] | select(.lts == false)][0].latest | {"collection": [.]}' <<<'${{ steps.curl_forge.outputs.forge_response }}')
        echo "latest=$out" >> $GITHUB_OUTPUT

    - name: Setup Acceptance Test Matrix
      id: get-matrix
      run: |
        if [[ -e spec/fixtures/matrix/latest.json ]]; then
          out=$(jq -c '. + ($matrix | .[])' --slurpfile matrix spec/fixtures/matrix/latest.json <<<'${{ steps.latest_release.outputs.latest }}')
          echo "matrix=$out" >> $GITHUB_OUTPUT
        else
          echo "matrix={}" >> $GITHUB_OUTPUT
        fi

  Acceptance:
    name: "${{matrix.platforms.label}}, ${{matrix.collection}}"
    needs:
      - setup_matrix
    if: ${{ needs.setup_matrix.outputs.matrix != '{}' }}

    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.setup_matrix.outputs.matrix)}}
    env:
      PUPPET_GEM_VERSION: '~> 7.24'
    steps:
    - name: Checkout Source
      uses: actions/checkout@v3

    - name: Activate Ruby 2.7
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: "2.7"
        bundler-cache: true
    - name: Print bundle environment
      run: |
        echo ::group::bundler environment
        bundle env
        echo ::endgroup::

    - name: Provision test environment
      run: |
        bundle exec rake 'litmus:provision[${{matrix.platforms.provider}},${{ matrix.platforms.image }}]'
        echo ::group::=== REQUEST ===
        cat request.json || true
        echo
        echo ::endgroup::
        echo ::group::=== INVENTORY ===
        if [ -f 'spec/fixtures/litmus_inventory.yaml' ];
        then
          FILE='spec/fixtures/litmus_inventory.yaml'
        elif [ -f 'inventory.yaml' ];
        then
          FILE='inventory.yaml'
        fi
        sed -e 's/password: .*/password: "[redacted]"/' < $FILE || true
        echo ::endgroup::
        echo INVENTORY_PATH=$FILE >> $GITHUB_ENV
    - name: Install PE
      run: |
        bundle exec bolt --tmpdir /tmp --log-level debug  --modulepath spec/fixtures/modules  -i ./$INVENTORY_PATH plan run deploy_pe::provision_master --params '{"version":"${{ matrix.collection }}","pe_settings":{"password":"Puppetlabs1!", "configure_tuning": false}}'  --targets all --stream

    - name: Install module
      run: |
        bundle exec rake 'litmus:install_module'
    - name: Run acceptance tests
      run: |
        bundle exec rake 'litmus:acceptance:parallel'
    - name: Remove test environment
      if: ${{ always() }}
      continue-on-error: true
      run: |
        if [[ -f inventory.yaml || -f spec/fixtures/litmus_inventory.yaml ]]; then
          bundle exec rake 'litmus:tear_down'
          echo ::group::=== REQUEST ===
          cat request.json || true
          echo
          echo ::endgroup::
        fi
